/*
 * Created on Apr 2, 2003
*/
package org.medi8.internal.core.model;

import java.util.Iterator;
import java.util.Vector;

import org.medi8.internal.core.model.events.NewTrackEvent;
import org.medi8.internal.core.model.events.SyntheticLengthChangeEvent;

/**
 * A Sequence is basically a collection of Tracks.
 * Conceptually, all Tracks in a sequence play simultaneously.
 */
public class Sequence implements Visitable
{
	/**
	 * Create a new Sequence object.
	 */
	public Sequence()
	{
		tracks = new Vector();
		listeners = new Vector();
	}
	
	public void addTrack(Track track)
	{
		tracks.add(track);
		track.addChangeNotifyListener(new IChangeListener () {
			public void notify(Medi8Event event) {
				// A synthetic length change event is generated by
				// updateSizes().
				if (! (event instanceof SyntheticLengthChangeEvent))
					updateSizes();
			}
		});
		updateSizes();
		notify(new NewTrackEvent(this, track));
	}
	
	public Iterator getIterator()
	{
		return tracks.iterator();
	}
	
	public void addChangeNotifyListener(IChangeListener listener)
	{
		listeners.add(listener);
	}
	
	/**
	 * Remove a change listener.
	 * @param listener  The listener to remove
	 */
	public void removeChangeNotifyListener(IChangeListener listener)
	{
		listeners.remove(listener);
	}
	
	private void notify(Medi8Event event)
	{
		for (int i = listeners.size() - 1; i >= 0; --i)
		{
			IChangeListener cl = (IChangeListener) listeners.get(i);
			cl.notify(event);
		}
	}
	
	public void visit (Visitor v)
	{
		v.visit(this);
	}
	
	public void visitChildren (Visitor v)
	{
		for (int i = 0; i < tracks.size(); ++i)
		{
			v.visit((VideoTrack) tracks.get(i));
		}
	}

	// FIXME: this exists so that rendering looks right.
	// In particular so that there is blank space after a track.
	// This should be handled by the Figure, not here!
	void updateSizes ()
	{
		// This is inefficient...
		Time max = null;
		for (int i = 0; i < tracks.size(); ++i)
		{
			VideoTrack t = (VideoTrack) tracks.get(i);
			Time n = t.getLength();
			if (max == null || n.compareTo(max) > 0)
				max = n;
		}
		if (max.zero())
		{
			// We want to display something in this case.
			// Use two hours.
			max = new Time(2 * 60 * 60);
		}
		for (int i = 0; i < tracks.size(); ++i)
		{
			VideoTrack t = (VideoTrack) tracks.get(i);
			t.setLength(max);
		}
	}

	/**
	 * All the tracks we contain.
	 */
	private Vector tracks;
	
	/**
	 * All event listeners.
	 */
	private Vector listeners;
	
	/**
	 * FPS for this sequence.  -1 if not known.
	 */
	private int fps = -1;
}
